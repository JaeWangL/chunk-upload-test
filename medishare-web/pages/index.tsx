import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { ChangeEvent, useCallback, useEffect, useState } from 'react'
import { toast } from 'react-toastify';
import axios from 'axios';
import { throttle } from 'lodash';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const uploadToastId = 'upload-progress-toast';
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const onFileChange = (event: ChangeEvent<HTMLInputElement>): void => {
    if (!event.target.files || event.target.files.length < 1) {
      return;
    }

    setSelectedFile(event.target.files[0]);
  };

  const handleUploadProgress = useCallback(
    throttle((progress: number) => {
      toast.update(uploadToastId, {
        render: `Upload Progress: ${progress}%`,
        position: "bottom-right",
        autoClose: false,
        closeOnClick: false,
        pauseOnHover: false,
        draggable: false,
        progress: progress / 100,
      });
    }, 200),
    []
  );

  useEffect(() => {
    return () => {
      handleUploadProgress.cancel();
    };
  }, []);

  const chunkFile = useCallback((file: File, chunkSize = 1024 * 1024): Blob[] => { // 1MB
    const chunks = [];
    let currentByte = 0;
  
    while (currentByte < file.size) {
      const chunk = file.slice(currentByte, currentByte + chunkSize);
      chunks.push(chunk);
      currentByte += chunkSize;
    }
  
    return chunks;
  }, []);

  const uploadChunks = useCallback(async (fileSize: number, chunks: Blob[], sasUrl: string, onProgress: (progress: number) => void) => {
    let uploadPromises = [];
    let uploadedBytes = 0;
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const blockId = window.btoa(String(i).padStart(5, "0"));
      const blockUrl = `${sasUrl}&comp=block&blockid=${blockId}`;
  
      uploadPromises.push(
        axios.put(blockUrl, chunk, {
          headers: {
            'x-ms-blob-type': 'BlockBlob',
          },
          onUploadProgress: (progressEvent) => {
            let currentChunkSize = Math.min(fileSize - uploadedBytes, chunk.size);
            uploadedBytes = uploadedBytes + progressEvent.loaded - (progressEvent.total! - currentChunkSize);
            const totalProgress = Math.round((uploadedBytes / fileSize) * 100);
            onProgress(totalProgress);
          },
        }).then(response => {
          if (response.status !== 201) {
            console.error('Upload block failed:', response);
            throw new Error('Chunk upload failed');
          }
          return blockId;
        })
      );

      const blockIds = await Promise.all(uploadPromises);
  
      const xml = `<BlockList>${blockIds.map(id => `<Latest>${id}</Latest>`).join("")}</BlockList>`;
      const commitUrl = `${sasUrl}&comp=blocklist`;
      const putBlockListResponse = await axios.put(commitUrl, xml, {
        headers: {
          'Content-Type': 'application/xml',
        },
      });
      if (putBlockListResponse.status !== 201 && putBlockListResponse.status !== 200) {
        console.error('Commit block list failed:', putBlockListResponse);
        throw new Error('Commit block list failed');
      }
    }
  }, []);

  const handleUplod = useCallback(async (): Promise<void> => {
    if (!selectedFile) {
      return;
    }

    toast('Starting upload...', {
      toastId: uploadToastId,
      position: "bottom-right",
      autoClose: false,
      closeOnClick: false,
      pauseOnHover: false,
      draggable: false,
      progress: 0,
    });

    const { data: sasUrl } = await axios.post<string>('http://localhost:8080/api/upload/sas/videos', {
      blobName: selectedFile.name,
      permission: 'w',
    });
    console.log(sasUrl);

    const chunks = chunkFile(selectedFile);
    await uploadChunks(selectedFile.size, chunks, sasUrl, handleUploadProgress);
  }, [selectedFile]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>pages/index.tsx</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
        </div>

        <div className={styles.grid}>
          <button
            type="button"
            className={styles.card}
            onClick={handleUplod}
          >
            <h2>
              Upload <span>-&gt;</span>
            </h2>
            <p>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </button>
          <input type="file" onChange={onFileChange} accept="video/mp4" />
        </div>
      </main>
    </>
  )
}
